package P3_PRDCT;
@ISA = ("RUNBPE");
# ============================================================================
#
# Name    :  P3_PRDCT
#
# Purpose :  Use FTP to download IGS, CODE products needed for Bernese processing
#
# PARAMs  :
#
# Authors :  S Fuller
# Created :  11-NOV-2020
#
# Changes :  
#
# ============================================================================
use strict;
use Switch;
use Net::FTP;
use HTTP::Cookies;
use LWP::UserAgent;
use MIME::Base64;


use lib $ENV{BPE};
use lib "$ENV{X}/EXE";
use bpe_util qw(prtMess);

sub run{
  my $bpe = shift;

# Get Bernese Variables
# -------------
  my ($wwwwd,$wwww, $yymm,$mm,$yyyy, $yy, $v_b) =
  $bpe->getKeys
     ('$WD+0','$W+0','$M+0','$M','$Y+0', '$Y', 'V_B');

# Variables
# ---------
my $ftp = '';
my $client = '';
my $usr = "your_CDDIS_username";
my $pwd = "your_CDDIS_password";
my $cookie_file = "CDDIS_Cookie.txt";

# IGS server and remote folder details
# You can add new servers to the hash if required.
# This definition contains only oner server, the CDDIS HTTP server
# This is the recommended defintion!
my %igsSvrs = (
  'cddis.nasa.gov' => {"Protocol" => "HTTP", "Path" => "/archive/gnss/products/${wwww}/" }
);

# The definition of igsSvrs below demonstrates a mix of HTTP and FTP servers
# You can use this definition if you want to use the old FTP sites as a backup mechanism.
# We DON"T recommend using this definition
#my %igsSvrs = (
#  'cddis.nasa.gov' => {"Protocol" => "HTTP", "Path" => "/archive/gnss/products/${wwww}/" },
#  'igs.ensg.igs.fr' => {"Protocol" => "FTP", "Path" => "/pub/igs/products/${wwww}/" },
#  'garner.ucsd.edu' => {"Protocol" => "FTP", "Path" => "/products/${wwww}/" }
#);

# CODE server and remote folder details
my $codsvr = "ftp.aiub.unibe.ch";
my $coddir = "/CODE/$yyyy";  # Remote folder for "final" CODE products
my $coddirrp = "/CODE";      # Remote folder for "rapid, ultra" CODE products

# Desired output file names (IGS Products)
# Note: Downloaed files (whether Final, Rapid, or Ultra) will be renamed to these filenames.
my $igssp3 = $v_b.$wwwwd.".SP3.Z";
my $iglsp3 = "IGL$wwwwd.SP3.Z";
my $igserp = $v_b.$wwww."7.ERP.Z";
my $igsclk = $v_b.$wwwwd.".CLK.Z";
my $p1c1   = "P1C1$yymm.DCB.Z";
my $p1p2   = "P1P2$yymm.DCB.Z";
my $codion = "COD$wwwwd.ION.Z";
my $codionrp = "COD$wwwwd.ION_R";
my $p1c1rp = "P1C1.DCB";
my $p1p2rp = "P1P2.DCB";

# Local folders to store downloaded files in
my $igsldr = "$ENV{D}/$v_b";
my $codldr = "$ENV{D}/BSW52";

# Utiliyt variables
my $wd = substr($wwwwd, 4, 1);
my $ret = '';
my @igsPrdcts = ("sp3","erp","clk");
my @igsPrdctsDone = ();

# IGS Products
# ------------
print "\n\nGetting IGS Products\n";
print "--------------------\n\n";

# Check that the local products directory exists, if not then create it.
if(!(-d $igsldr)) {
  mkdir $igsldr;
  prtMess($bpe, "IGS Products directory ${igsldr} created.");
}

# Change local directory
chdir $igsldr;
print "Changed local directory to ($igsldr)..\n";

# Loop through the available IGS FTP servers until we have all required products.
my @keys = keys %igsSvrs;
foreach my $igssvr (@keys) {
  print "Server is: $igssvr, Path is: " . $igsSvrs{$igssvr}{"Path"} . "\n";

  # Have we got all the products we need?
  if (scalar(@igsPrdctsDone) != 3) { print "Need to get products!\n"; }

  print "Connecting to $igssvr..\n";
  my $svrProtocol = $igsSvrs{$igssvr}{"Protocol"};

  # Establish connection 
  if ($svrProtocol eq "FTP" ) {
    $client = Net::FTP->new($igssvr, Passive => 1, Debug => 0);
  } else {
    # Setting up for a HTTP connection to CDDIS
    # Original code taken from CDDIS Perl example.
    # Setup user agent (client)
    $client = LWP::UserAgent->new(
      cookie_jar  => HTTP::Cookies->new(
        file => $cookie_file,
        ignore_discard => 1,
        autosave => 1
      )
    );
    # Disable SSL
    $client->ssl_opts(verify_hostname => 0);
    # Setup authentication handler
    my $urs = 'urs.earthdata.nasa.gov';
    my $credentials = encode_base64("$usr:$pwd", ""); 
    $client->add_handler(
        request_prepare => sub {
            my($request, $ua, $h) = @_;
            print "Providing Earthdata Login credentials\n"; 
            $request->header(Authorization => "Basic $credentials");
        },
        m_host => $urs,
        m_path_prefix => '/oauth/authorize'
    );
    # Setup handler for authentication refusals
    $client->add_handler(
      response_done => sub {
        my($response, $ua, $h) = @_;
        if ($response->code == 302 && $response->header('location') =~ /error=access_denied/) {
          $response->code(403);
          $response->message('Forbidden');
          $response->content('You have not authorized the application providing this data.');

          # Pull out the client ID needed for the application approval URL

          if ($response->request->uri =~ /client_id=([^&]+)/ ) {
            $response->header('location' => "https://${urs}/approve_app?client_id=${1}");
          }
        }
      },
      m_host => $urs,
      m_path_prefix => '/oauth/authorize'
    );
  }

  if ($client eq '') {
    print "Cannot connect to $igssvr\n";
    next;
  }

  # Complete any protocol specific connection tasks (e.g. Login)
  my $gpsdir = '';
  if ($svrProtocol eq "FTP") {
    # FTP Login
    #$client->login($usr,$pwd)
    $client->login("anonymous","password")
      or print "Cannot login to $igssvr\n", $ftp->message;
    # FTP transfer mode to binary
    $client->binary() or print "Cannot set binary mode: $!";
    print "FTP Connection Setup Complete!\n";
    $gpsdir = $igsSvrs{$igssvr}{"Path"};
  } else {
    print "Trying for HTPP request \n";
    $gpsdir = $igssvr . $igsSvrs{$igssvr}{"Path"};
  }
  
  print "Remote path is: " . $gpsdir . "\n";

  # Change to Products directory
  foreach my $product (@igsPrdcts) {
    # Reset return results
	$ret = '';
	
	# Deal with any special cases, e.g. Weekly ERP files
    if ($product eq "erp") {
      $ret = get_IGS_Product($svrProtocol, $client, $gpsdir, $product, "${wwww}7");
    }
    
	# Deal with the generic cases
    if ($ret eq "") {
      $ret = get_IGS_Product($svrProtocol, $client, $gpsdir, $product, $wwwwd);
    }
	
	# Did we download a file, if so then rename it.
    if ($ret ne "") {
      # Rename file to its appropriate "Final" filename.
      switch ($product) {
        case "sp3" { rename $igsldr."/".$ret, $igsldr."/".$igssp3; }
        case "erp" { rename $igsldr."/".$ret, $igsldr."/".$igserp; }
        case "clk" { rename $igsldr."/".$ret, $igsldr."/".$igsclk; }
        else { print "Unrecognised product\n"; }
      }
      push(@igsPrdctsDone, $product);
    }
  }

  # Terminate connection
  if ($svrProtocol eq "FTP") {
    $client->quit();
    print "Disconnecting from $igssvr..\n\n\n";
  }
}

# Have we got all the products we need?
if (scalar(@igsPrdctsDone) == 3) { print "We have all the products!\n"; }

# CODE Products
# =============

# Set up connection, try at least three times, with 5 secs btw each attempt
for (my $try = 0; $try <= 3; $try++) {
  $ftp = Net::FTP->new($codsvr, Passive => 1, Debug => 0);
  if ($ftp != '') {
    print "Connected to " . $codsvr . "\n";
    last;
  }
  print "Unable to connect to ${codsvr}. Trying again in 5 seconds\n";
  sleep(5);
}

if ($ftp != '') {

  print "Authenticating..\n";

  # Login
  $ftp->login("anonymous", "password")
	or print "Cannot login to $codsvr\n", $ftp->message;

  print "Logged in..\n";

  # Set transfer mode to binary
  $ftp->binary() or print "Cannot set binary mode: $!";

  # Change the local directory
  chdir $codldr;
  print "Changed local directory to Bernese datapool ($codldr)..\n";

  # Change to CODE Finals directory
  if ($ftp->cwd($coddir)) {
    print "Changed to CODE products directory ($coddir)..\n";
    # Get P1C1 DCBs
    $ret = get_CODE_DCB($ftp, $yymm, "P1C1");
    if ( index($ret, ".Z") == -1) {
      rename $codldr."/".$ret, $codldr."/P1C1".$yymm.".DCB";
      print "File $ret downloaded and renamed..\n";
    }
  
    # Get P1P2 DCBs
    $ftp->cwd($coddir);
    $ret = get_CODE_DCB($ftp, $yymm, "P1P2");
    if ( (index($ret, ".Z") == -1) && ($ret ne "") ) {
      rename $codldr."/".$ret, $codldr."/P1P2".$yymm.".DCB";
      print "File $ret downloaded and renamed..\n";
    }
  }

  # Change to CODE Finals directory
  if ($ftp->cwd($coddir)) {
    print "Changed to CODE products directory ($coddir)..\n";
  
    # Get the ION product.
    $ret = get_CODE_ION($ftp, $wwwwd);
    if ( (index($ret, ".Z") == -1) && ($ret ne "") ) {
      rename $codldr."/".$ret, $codldr."/COD".$wwwwd.".ION";
      print "File $ret downloaded and renamed..\n";
    }
  }

  # Terminate connection
  $ftp->quit();
  print "Disconnecting from $codsvr..\n\n\n";
}
else
{
  print "Failed to connect to ${codsvr} after three attempts!!\n";
}

sub get_IGS_Product {
  my ($protocol, $client, $path, $product, $wwwwd) = @_;
  my $tryFile = "";
  my $level = 0;

  while ($level < 6) {
    # Construct the file name to try
    switch ($level) {
      case 0 { $tryFile = "igs".$wwwwd.".".$product.".Z"; }
      case 1 { $tryFile = "igr".$wwwwd.".".$product.".Z"; }
      case 2 { $tryFile = "igu".$wwwwd."_18.".$product.".Z"; }
      case 3 { $tryFile = "igu".$wwwwd."_12.".$product.".Z"; }
      case 4 { $tryFile = "igu".$wwwwd."_06.".$product.".Z"; }
      case 5 { $tryFile = "igu".$wwwwd."_00.".$product.".Z"; }
      else { last; }
    }

    # Different protocols require different execution of "get this file".
    if ($protocol eq "FTP") {
      print "FTP: Checking remote host for: ${path}${tryFile}\n";
      # Attempt download
      if ($client->size($path . $tryFile) > 0) {
        print "FTP: Found! Trying to download: $tryFile\n";
        $client->get($path . $tryFile);
        print "FTP: Success! ${path}${tryFile} downloaded.\n";
        last;
      } else {
        print "FTP: $tryFile does not exist or has size of zero\n";
        $level = $level + 1;
        $tryFile = "";
      }
    }  

    if ($protocol eq "HTTP") {
      print "Checking remote host for: $path$tryFile\n";
      # Attempt download
      my $req = HTTP::Request->new(GET => "https://".$path.$tryFile);
      my $response = $client->request($req);
      if ($response->is_success) {
        print "HTTP: Found! Trying to download: $tryFile\n";
        open my $handle, '>', $tryFile;
        binmode $handle;
        print $handle $response->content;
        close $handle;
        print "HTTP: Success! $tryFile downloaded..\n";
        last;
      } else {
        print "HTTP: Request failed\n";
        print "HTTP: Code - " . $response->code . " Message - " . $response->message . "\n";
      }

      # If we get here, we need to try the next level of file.
      $level = $level + 1;
      $tryFile = "";
    }  
  }
  
  return $tryFile;
  
}

sub get_CODE_DCB {
  my ($ftp, $yymm, $type) = @_;
  my $tryFile = $type.$yymm.".DCB.Z";
  
  print "Checking for: $tryFile\n";
  # Attempt download
  if($ftp->size($tryFile) > 0) {
    print "Found! Trying to download: $tryFile\n";
    $ftp->get($tryFile);
    print "Success! $tryFile downloaded..\n";
	return $tryFile;
  }
  
  # Final DCB not availabe, try for rapid
  if ($ftp->cdup()) {
    $tryFile = $type.".DCB";
	print "Checking for: $tryFile\n";
    # Attempt download
    if($ftp->size($tryFile) > 0) {
      print "Found! Trying to download: $tryFile\n";
      $ftp->get($tryFile);
      print "Success! $tryFile downloaded..\n";
	  return $tryFile;
	}
  }
	
  # If here, not successful.
  return "";
  
}

sub get_CODE_ION {
  my ($ftp, $wwwwd) = @_;
  my $tryFile = "";
  my $level = 0;
  
  while ($level < 3) {
    # Construct the file name to try
	switch ($level) {
	  case 0 { $tryFile = "COD".$wwwwd.".ION.Z"; }
	  case 1 { $tryFile = "COD".$wwwwd.".ION_R"; }
	  case 2 { $tryFile = "COD".$wwwwd.".ION_P"; }
	  else { last; }
	}
	
    print "Checking for: $tryFile\n";
    # Attempt download
    if($ftp->size($tryFile) > 0) {
      print "Found! Trying to download: $tryFile\n";
      $ftp->get($tryFile);
      print "Success! ${tryFile} downloaded..\n";
	  last;
    } else {
      $level = $level + 1;
	  # The rapid and predicted files ($level > 0) are in a different folder...
	  if ($level == 1) { $ftp->cdup(); }
 	  $tryFile = "";
	}
  }
  return $tryFile;
}

}
